// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverstream.proto

//声明 包名

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//stream 请求结构
type ServerStreamReq struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerStreamReq) Reset()         { *m = ServerStreamReq{} }
func (m *ServerStreamReq) String() string { return proto.CompactTextString(m) }
func (*ServerStreamReq) ProtoMessage()    {}
func (*ServerStreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35edb3ef4a25fe52, []int{0}
}

func (m *ServerStreamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerStreamReq.Unmarshal(m, b)
}
func (m *ServerStreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerStreamReq.Marshal(b, m, deterministic)
}
func (m *ServerStreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStreamReq.Merge(m, src)
}
func (m *ServerStreamReq) XXX_Size() int {
	return xxx_messageInfo_ServerStreamReq.Size(m)
}
func (m *ServerStreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStreamReq proto.InternalMessageInfo

func (m *ServerStreamReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

//stream 返回结构
type ServerStreamResp struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerStreamResp) Reset()         { *m = ServerStreamResp{} }
func (m *ServerStreamResp) String() string { return proto.CompactTextString(m) }
func (*ServerStreamResp) ProtoMessage()    {}
func (*ServerStreamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_35edb3ef4a25fe52, []int{1}
}

func (m *ServerStreamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerStreamResp.Unmarshal(m, b)
}
func (m *ServerStreamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerStreamResp.Marshal(b, m, deterministic)
}
func (m *ServerStreamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerStreamResp.Merge(m, src)
}
func (m *ServerStreamResp) XXX_Size() int {
	return xxx_messageInfo_ServerStreamResp.Size(m)
}
func (m *ServerStreamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerStreamResp.DiscardUnknown(m)
}

var xxx_messageInfo_ServerStreamResp proto.InternalMessageInfo

func (m *ServerStreamResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerStreamReq)(nil), "helloworld.ServerStreamReq")
	proto.RegisterType((*ServerStreamResp)(nil), "helloworld.ServerStreamResp")
}

func init() { proto.RegisterFile("serverstream.proto", fileDescriptor_35edb3ef4a25fe52) }

var fileDescriptor_35edb3ef4a25fe52 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x2a, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0xca, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0x51, 0x52, 0xe5, 0xe2, 0x0f, 0x06,
	0xab, 0x08, 0x06, 0xab, 0x08, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd4, 0xb8, 0x04, 0x50, 0x95, 0x15, 0x17,
	0x60, 0x53, 0x67, 0x94, 0xcc, 0x25, 0x84, 0xac, 0x0e, 0xc2, 0x16, 0xf2, 0xe5, 0xe2, 0x41, 0x16,
	0x15, 0x92, 0xd6, 0x43, 0xb8, 0x40, 0x0f, 0xcd, 0x7a, 0x29, 0x19, 0xdc, 0x92, 0xc5, 0x05, 0x4a,
	0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x6f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x7e,
	0x80, 0x87, 0xdc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerStreamServerClient is the client API for ServerStreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerStreamServerClient interface {
	//  服务端推送流
	ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (ServerStreamServer_ServerStreamClient, error)
}

type serverStreamServerClient struct {
	cc *grpc.ClientConn
}

func NewServerStreamServerClient(cc *grpc.ClientConn) ServerStreamServerClient {
	return &serverStreamServerClient{cc}
}

func (c *serverStreamServerClient) ServerStream(ctx context.Context, in *ServerStreamReq, opts ...grpc.CallOption) (ServerStreamServer_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServerStreamServer_serviceDesc.Streams[0], "/helloworld.ServerStreamServer/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamServerServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamServer_ServerStreamClient interface {
	Recv() (*ServerStreamResp, error)
	grpc.ClientStream
}

type serverStreamServerServerStreamClient struct {
	grpc.ClientStream
}

func (x *serverStreamServerServerStreamClient) Recv() (*ServerStreamResp, error) {
	m := new(ServerStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServerServer is the server API for ServerStreamServer service.
type ServerStreamServerServer interface {
	//  服务端推送流
	ServerStream(*ServerStreamReq, ServerStreamServer_ServerStreamServer) error
}

func RegisterServerStreamServerServer(s *grpc.Server, srv ServerStreamServerServer) {
	s.RegisterService(&_ServerStreamServer_serviceDesc, srv)
}

func _ServerStreamServer_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServerServer).ServerStream(m, &serverStreamServerServerStreamServer{stream})
}

type ServerStreamServer_ServerStreamServer interface {
	Send(*ServerStreamResp) error
	grpc.ServerStream
}

type serverStreamServerServerStreamServer struct {
	grpc.ServerStream
}

func (x *serverStreamServerServerStreamServer) Send(m *ServerStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

var _ServerStreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.ServerStreamServer",
	HandlerType: (*ServerStreamServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _ServerStreamServer_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serverstream.proto",
}

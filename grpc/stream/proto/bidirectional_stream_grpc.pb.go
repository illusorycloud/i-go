// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BidirectionalStreamServerClient is the client API for BidirectionalStreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalStreamServerClient interface {
	// 客户端推送多个整数,服务端分别开方后返回
	Sqrt(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamServer_SqrtClient, error)
}

type bidirectionalStreamServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalStreamServerClient(cc grpc.ClientConnInterface) BidirectionalStreamServerClient {
	return &bidirectionalStreamServerClient{cc}
}

func (c *bidirectionalStreamServerClient) Sqrt(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamServer_SqrtClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BidirectionalStreamServer_serviceDesc.Streams[0], "/stream.BidirectionalStreamServer/Sqrt", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionalStreamServerSqrtClient{stream}
	return x, nil
}

type BidirectionalStreamServer_SqrtClient interface {
	Send(*AllStreamReq) error
	Recv() (*AllStreamResp, error)
	grpc.ClientStream
}

type bidirectionalStreamServerSqrtClient struct {
	grpc.ClientStream
}

func (x *bidirectionalStreamServerSqrtClient) Send(m *AllStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionalStreamServerSqrtClient) Recv() (*AllStreamResp, error) {
	m := new(AllStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalStreamServerServer is the server API for BidirectionalStreamServer service.
// All implementations must embed UnimplementedBidirectionalStreamServerServer
// for forward compatibility
type BidirectionalStreamServerServer interface {
	// 客户端推送多个整数,服务端分别开方后返回
	Sqrt(BidirectionalStreamServer_SqrtServer) error
	mustEmbedUnimplementedBidirectionalStreamServerServer()
}

// UnimplementedBidirectionalStreamServerServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionalStreamServerServer struct {
}

func (UnimplementedBidirectionalStreamServerServer) Sqrt(BidirectionalStreamServer_SqrtServer) error {
	return status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedBidirectionalStreamServerServer) mustEmbedUnimplementedBidirectionalStreamServerServer() {
}

// UnsafeBidirectionalStreamServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalStreamServerServer will
// result in compilation errors.
type UnsafeBidirectionalStreamServerServer interface {
	mustEmbedUnimplementedBidirectionalStreamServerServer()
}

func RegisterBidirectionalStreamServerServer(s grpc.ServiceRegistrar, srv BidirectionalStreamServerServer) {
	s.RegisterService(&_BidirectionalStreamServer_serviceDesc, srv)
}

func _BidirectionalStreamServer_Sqrt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalStreamServerServer).Sqrt(&bidirectionalStreamServerSqrtServer{stream})
}

type BidirectionalStreamServer_SqrtServer interface {
	Send(*AllStreamResp) error
	Recv() (*AllStreamReq, error)
	grpc.ServerStream
}

type bidirectionalStreamServerSqrtServer struct {
	grpc.ServerStream
}

func (x *bidirectionalStreamServerSqrtServer) Send(m *AllStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionalStreamServerSqrtServer) Recv() (*AllStreamReq, error) {
	m := new(AllStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BidirectionalStreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.BidirectionalStreamServer",
	HandlerType: (*BidirectionalStreamServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sqrt",
			Handler:       _BidirectionalStreamServer_Sqrt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectional_stream.proto",
}

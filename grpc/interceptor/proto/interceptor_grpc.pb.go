// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InterceptorClient is the client API for Interceptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterceptorClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Sqrt(ctx context.Context, opts ...grpc.CallOption) (Interceptor_SqrtClient, error)
}

type interceptorClient struct {
	cc grpc.ClientConnInterface
}

func NewInterceptorClient(cc grpc.ClientConnInterface) InterceptorClient {
	return &interceptorClient{cc}
}

func (c *interceptorClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/interceptor.Interceptor/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interceptorClient) Sqrt(ctx context.Context, opts ...grpc.CallOption) (Interceptor_SqrtClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Interceptor_serviceDesc.Streams[0], "/interceptor.Interceptor/Sqrt", opts...)
	if err != nil {
		return nil, err
	}
	x := &interceptorSqrtClient{stream}
	return x, nil
}

type Interceptor_SqrtClient interface {
	Send(*SqrtReq) error
	Recv() (*SqrtReply, error)
	grpc.ClientStream
}

type interceptorSqrtClient struct {
	grpc.ClientStream
}

func (x *interceptorSqrtClient) Send(m *SqrtReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *interceptorSqrtClient) Recv() (*SqrtReply, error) {
	m := new(SqrtReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterceptorServer is the server API for Interceptor service.
// All implementations must embed UnimplementedInterceptorServer
// for forward compatibility
type InterceptorServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Sqrt(Interceptor_SqrtServer) error
	mustEmbedUnimplementedInterceptorServer()
}

// UnimplementedInterceptorServer must be embedded to have forward compatible implementations.
type UnimplementedInterceptorServer struct {
}

func (UnimplementedInterceptorServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedInterceptorServer) Sqrt(Interceptor_SqrtServer) error {
	return status.Errorf(codes.Unimplemented, "method Sqrt not implemented")
}
func (UnimplementedInterceptorServer) mustEmbedUnimplementedInterceptorServer() {}

// UnsafeInterceptorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterceptorServer will
// result in compilation errors.
type UnsafeInterceptorServer interface {
	mustEmbedUnimplementedInterceptorServer()
}

func RegisterInterceptorServer(s grpc.ServiceRegistrar, srv InterceptorServer) {
	s.RegisterService(&_Interceptor_serviceDesc, srv)
}

func _Interceptor_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterceptorServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interceptor.Interceptor/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterceptorServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interceptor_Sqrt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InterceptorServer).Sqrt(&interceptorSqrtServer{stream})
}

type Interceptor_SqrtServer interface {
	Send(*SqrtReply) error
	Recv() (*SqrtReq, error)
	grpc.ServerStream
}

type interceptorSqrtServer struct {
	grpc.ServerStream
}

func (x *interceptorSqrtServer) Send(m *SqrtReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *interceptorSqrtServer) Recv() (*SqrtReq, error) {
	m := new(SqrtReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Interceptor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interceptor.Interceptor",
	HandlerType: (*InterceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Interceptor_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sqrt",
			Handler:       _Interceptor_Sqrt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "interceptor.proto",
}

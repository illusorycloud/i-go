// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clientstream.proto

//声明 包名

package helloworld

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//stream 请求结构
type ClientStreamReq struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientStreamReq) Reset()         { *m = ClientStreamReq{} }
func (m *ClientStreamReq) String() string { return proto.CompactTextString(m) }
func (*ClientStreamReq) ProtoMessage()    {}
func (*ClientStreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40fd65124221ea4, []int{0}
}

func (m *ClientStreamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientStreamReq.Unmarshal(m, b)
}
func (m *ClientStreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientStreamReq.Marshal(b, m, deterministic)
}
func (m *ClientStreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStreamReq.Merge(m, src)
}
func (m *ClientStreamReq) XXX_Size() int {
	return xxx_messageInfo_ClientStreamReq.Size(m)
}
func (m *ClientStreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStreamReq proto.InternalMessageInfo

func (m *ClientStreamReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

//stream 返回结构
type ClientStreamResp struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientStreamResp) Reset()         { *m = ClientStreamResp{} }
func (m *ClientStreamResp) String() string { return proto.CompactTextString(m) }
func (*ClientStreamResp) ProtoMessage()    {}
func (*ClientStreamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f40fd65124221ea4, []int{1}
}

func (m *ClientStreamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientStreamResp.Unmarshal(m, b)
}
func (m *ClientStreamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientStreamResp.Marshal(b, m, deterministic)
}
func (m *ClientStreamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientStreamResp.Merge(m, src)
}
func (m *ClientStreamResp) XXX_Size() int {
	return xxx_messageInfo_ClientStreamResp.Size(m)
}
func (m *ClientStreamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientStreamResp.DiscardUnknown(m)
}

var xxx_messageInfo_ClientStreamResp proto.InternalMessageInfo

func (m *ClientStreamResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientStreamReq)(nil), "helloworld.ClientStreamReq")
	proto.RegisterType((*ClientStreamResp)(nil), "helloworld.ClientStreamResp")
}

func init() { proto.RegisterFile("clientstream.proto", fileDescriptor_f40fd65124221ea4) }

var fileDescriptor_f40fd65124221ea4 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0x29, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0xca, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0x51, 0x52, 0xe5, 0xe2, 0x77, 0x06,
	0xab, 0x08, 0x06, 0xab, 0x08, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd4, 0xb8, 0x04, 0x50, 0x95, 0x15, 0x17,
	0x60, 0x53, 0x67, 0x94, 0xcc, 0x25, 0x84, 0xac, 0x2e, 0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0xc8,
	0x97, 0x8b, 0x07, 0x59, 0x54, 0x48, 0x5a, 0x0f, 0xe1, 0x02, 0x3d, 0x34, 0xeb, 0xa5, 0x64, 0x70,
	0x4b, 0x16, 0x17, 0x28, 0x31, 0x68, 0x30, 0x26, 0xb1, 0x81, 0xbd, 0x61, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x08, 0x60, 0x26, 0x29, 0xdc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientStreamServerClient is the client API for ClientStreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientStreamServerClient interface {
	// 客户端推送流
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (ClientStreamServer_ClientStreamClient, error)
}

type clientStreamServerClient struct {
	cc *grpc.ClientConn
}

func NewClientStreamServerClient(cc *grpc.ClientConn) ClientStreamServerClient {
	return &clientStreamServerClient{cc}
}

func (c *clientStreamServerClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (ClientStreamServer_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientStreamServer_serviceDesc.Streams[0], "/helloworld.ClientStreamServer/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamServerClientStreamClient{stream}
	return x, nil
}

type ClientStreamServer_ClientStreamClient interface {
	Send(*ClientStreamReq) error
	CloseAndRecv() (*ClientStreamResp, error)
	grpc.ClientStream
}

type clientStreamServerClientStreamClient struct {
	grpc.ClientStream
}

func (x *clientStreamServerClientStreamClient) Send(m *ClientStreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamServerClientStreamClient) CloseAndRecv() (*ClientStreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamServerServer is the server API for ClientStreamServer service.
type ClientStreamServerServer interface {
	// 客户端推送流
	ClientStream(ClientStreamServer_ClientStreamServer) error
}

func RegisterClientStreamServerServer(s *grpc.Server, srv ClientStreamServerServer) {
	s.RegisterService(&_ClientStreamServer_serviceDesc, srv)
}

func _ClientStreamServer_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServerServer).ClientStream(&clientStreamServerClientStreamServer{stream})
}

type ClientStreamServer_ClientStreamServer interface {
	SendAndClose(*ClientStreamResp) error
	Recv() (*ClientStreamReq, error)
	grpc.ServerStream
}

type clientStreamServerClientStreamServer struct {
	grpc.ServerStream
}

func (x *clientStreamServerClientStreamServer) SendAndClose(m *ClientStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamServerClientStreamServer) Recv() (*ClientStreamReq, error) {
	m := new(ClientStreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientStreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.ClientStreamServer",
	HandlerType: (*ClientStreamServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _ClientStreamServer_ClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clientstream.proto",
}
